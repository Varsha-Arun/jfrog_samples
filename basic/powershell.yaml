resources:
  - name: myImage
    type: Image
    configuration:
      registry: tr_docker
      imageName: trriplejay/simpleserver
      imageTag: latest

  - name: myRepo
    type: GitRepo
    configuration:
      path: trriplejay/jfrog_samples
      gitProvider: tr_github


  - name: myBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: johns_art
      buildName: test
      buildNumber: 0

  - name: myFileSpec
    type: FileSpec
    configuration:
      sourceArtifactory: johns_art
      target: pipelines_1578094170
      pattern: "projects/*"
      recursive: true
      flat: false
      limit: 5
      offset: 2
########## HOOKS basic auth
  - name: myIncomingHook
    type: IncomingWebhook
    configuration:
      webhookName: johns_wh_internal

  - name: myOutgoingHook
    type: OutgoingWebhook
    configuration:
      webhookName: johns_wh_external
      headers:
        Content-Type: "application/json"
        MySpecialHeader: "foobar"
        Pipeline-Name: "$pipeline_name"
      path: "/pipelines/api/v1/projectIntegrations/20/hook"
      parameters: "hello=world"
########### END HOOKS basic auth

############ HOOKS hmac
  - name: myIncomingHook_hmac
    type: IncomingWebhook
    configuration:
      webhookName: johns_wh_internal_hmac

  - name: myOutgoingHook_hmac
    type: OutgoingWebhook
    configuration:
      webhookName: johns_wh_external_hmac
      headers:
        Content-Type: "application/json"
        MySpecialHeader: "foobar"
        Pipeline-Name: "$pipeline_name"
      path: "/pipelines/api/v1/projectIntegrations/22/hook"
      parameters: "hello=world"
############ END HOOKS hmac

############ HOOKS auth
  - name: myIncomingHook_auth
    type: IncomingWebhook
    configuration:
      webhookName: johns_wh_internal_auth

  - name: myOutgoingHook_auth
    type: OutgoingWebhook
    configuration:
      webhookName: johns_wh_external_auth
      headers:
        Content-Type: "application/json"
        MySpecialHeader: "foobar"
        Pipeline-Name: "$pipeline_name"
      path: "/pipelines/api/v1/projectIntegrations/24/hook"
      parameters: "hello=world"
############ END HOOKS hmac





pipelines:
############ HOOKS
  - name: outgoing_hook
    steps:
      - name: send_it
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
          outputResources:
            - name: myOutgoingHook
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table
#             - set_payload -name myOutgoingHook -payload "{`"hello`":`"World`"}"
            - $payloadFile = "test.json"
            - New-Item -Path "test.json"  -Force -ItemType File
            - '[IO.File]::WriteAllLines(("test.json" | Resolve-Path), "{`"hello`":`"World`"}")'
            - set_payload -name myOutgoingHook -payload test.json -file

      - name: send_it_hmac
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
          outputResources:
            - name: myOutgoingHook_hmac
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table
            - set_payload -name myOutgoingHook_hmac -payload "{`"hello`":`"World`"}"

      - name: send_it_auth
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
          outputResources:
            - name: myOutgoingHook_auth
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table
            - set_payload -name myOutgoingHook_auth -payload "{`"hello`":`"World`"}"

  - name: incoming_hook
    steps:
      - name: get_it
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
            - name: myIncomingHook
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table

      - name: get_it_hmac
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
            - name: myIncomingHook_hmac
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table

      - name: get_it_auth
        type: PowerShell
        configuration:
          inputResources:
            - name: myBuildInfo
            - name: myIncomingHook_auth
        execution:
          onExecute:
            - Write-Output "hello"
            - Get-Variable | format-table


########### END HOOKS


############ resources/integrations
  - name: win_one_little_step
    configuration:
      environmentVariables:
        readOnly:
          pipeline_readonly_env: "you can't change me!"
        pipeline_writable_env: "I'm subject to change"
    steps:
      - name: test_envs
        type: PowerShell
        configuration:
          environmentVariables:
            step_writable_env: "I'm subject to change"
          inputResources:
            - name: myImage
            - name: myRepo
              trigger: false
            - name: myBuildInfo
            - name: myFileSpec
          integrations:
            - name: johns_generic_envs
            - name: johns_art
            - name: johns_kube
            - name: johns_gcloud
        execution:
          onStart:
            - write-output "image resource path is $res_myImage_resourcePath"
            - write-output "current section. is it $current_script_section or $global:current_script_section"
          onExecute:
            - write-output "current section. is it $current_script_section or $global:current_script_section"
            - write-output "lets take a look at the whole ENV.. its faster..."
            - try { $pipeline_readonly_env = "haha i changed you" } catch {$_}
            - try { $global:pipeline_readonly_env = "haha i changed you" } catch {$_}
            - try { $pipeline_writeable_env = "haha i changed you" } catch {$_}
            - try { $step_writeable_env = "haha i changed you" } catch {$_}
            - get-variable
            - get-variable | format-table -property name, value, options
            - try { $global:pipeline_writeable_env = "haha i changed you" } catch {$_}
            - write-output "$global:pipeline_writeable_env"
            - write-output "$pipeline_writeable_env"
            - write-output "$global:pipeline_readonly_env"
            - write-output "$pipeline_readonly_env"
            - get-variable -name pipeline_readonly_env
            - get-variable -name pipeline_readonly_env -scope global
            - get-variable -name pipeline_writeable_env
            - get-variable -name pipeline_writeable_env -scope global
            - get-variable -name KUBECONFIG
            - get-content "$KUBECONFIG"
            - get-childitem "$step_workspace_dir/johns_kube"


          onSuccess:
            - write-output "current section. is it $current_script_section or $global:current_script_section"
            - write-output "try to change a readonly variable"

          onFailure:
            - write-output "current section. is it $current_script_section or $global:current_script_section"
          onComplete:
            - write-output "current section. is it $current_script_section or $global:current_script_section"
############ END resources/integrations



############ flow control
  - name: windows_basic_pipe
    steps:
      - name: full_success
        type: PowerShell
        configuration:
          nodePool: win-static
          affinityGroup: winffinity
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onExecute
        type: PowerShell
        configuration:
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
            - bad stuff
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onStart
        type: PowerShell
        configuration:
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
            - bad stuff
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onFailure
        type: PowerShell
        configuration:
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
            - bad stuff
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
            - bad stuff
          onComplete:
            - write-output "mission complete"

      - name: fail_onSuccess
        type: PowerShell
        configuration:
          affinityGroup: winffinity
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
            - bad stuff
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onComplete
        type: PowerShell
        configuration:
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"
            - bad stuff

      - name: fail_onExecute_host
        type: PowerShell
        configuration:
          runtime:
            type: host
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
            - bad stuff
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onStart_host
        type: PowerShell
        configuration:
          runtime:
            type: host
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
            - bad stuff
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onFailure_host
        type: PowerShell
        configuration:
          runtime:
            type: host
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
            - bad stuff
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
            - bad stuff
          onComplete:
            - write-output "mission complete"

      - name: fail_onSuccess_host
        type: PowerShell
        configuration:
          runtime:
            type: host
          affinityGroup: winffinity
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
            - bad stuff
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"

      - name: fail_onComplete_host
        type: PowerShell
        configuration:
          runtime:
            type: host
          inputSteps:
            - name: full_success
          nodePool: win-static
          environmentVariables:
            foo: bar
        execution:
          onStart:
            - write-output "starting"
          onExecute:
            - write-output "hello world. executing..."
            - write-output "foo is $foo or is it $env:foo ?"
          onSuccess:
            - write-output "we did it!"
          onFailure:
            - write-output "we've failed"
          onComplete:
            - write-output "mission complete"
            - bad stuff

########### END flow control



########### header util testing
  - name: test_header_funcs
    steps:
      - name: add_run_files
        type: PowerShell
        configuration:
          inputResources:
            - name: myRepo
              trigger: false
        execution:
          onExecute:
            - try { add_run_files } catch {$_} # no arguments
            - try { add_run_files "blah" } catch {$_} # one argument
            - try { add_run_files -sources a,b,c } catch {$_} # missing name
            - try { add_run_files -sources "test" -name "hello world"} catch {$_} #space not allowed
            - get-childitem $run_dir\workspace
            - get-childitem $res_myRepo_resourcePath
            - add_run_files -sources $res_myRepo_resourcePath -name myrun
            - add_run_files -sources $res_myRepo_resourcePath\file* myfiles
            - get-childitem $run_dir\workspace
            - get-childitem $run_dir\workspace\myrun
            - get-childitem $run_dir\workspace\myfiles
            - get-childitem $pipeline_workspace_dir
            - add_pipeline_files -sources $res_myRepo_resourcePath -name mypipe
            - add_pipeline_files -sources $res_myRepo_resourcePath\file* myfiles
            - get-childitem $pipeline_workspace_dir
            - get-childitem $pipeline_workspace_dir\mypipe

      - name: restore_run_files
        type: PowerShell
        configuration:
          inputResources:
            - name: myRepo
              trigger: false
          inputSteps:
            - name: add_run_files
        execution:
          onExecute:
            - get-childitem $run_dir\workspace
            - get-childitem $pipeline_workspace_dir
            - restore_run_files -name myrun -path $step_tmp_dir
            - get-childitem $run_dir\workspace\myrun
            - get-childitem $run_dir\workspace\myfiles
            - get-childitem $step_tmp_dir
            - get-childitem $pipeline_workspace_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - restore_pipeline_files -name mypipe -path $step_tmp_dir
            - get-childitem $pipeline_workspace_dir\mypipe
            - get-childitem $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - restore_run_files -name myfiles -path $step_tmp_dir
            - get-childitem $step_tmp_dir
            - remove-item -recurse -path $step_tmp_dir\*
            - restore_pipeline_files -name myfiles -path $step_tmp_dir
            - get-childitem $step_tmp_dir
########### END header util testing

  - name: win_scratch
    steps:
      - name: win_scratch_step
        type: PowerShell
        execution:
          onExecute:
            - 'get-childitem env:'
            - get-variable | format-table
            - write-output "path is $env:Path"
            - write-output "docker host is $env:DOCKER_HOST"
            - write-output "docker dir is $env:DOCKER_DIR"
            - docker ps -a
            - docker images
            - docker version
            - choco install -y which
            - write-output "path is $env:Path"
            - docker ps -a
            - refreshenv
            - write-output "path is $env:Path"
            - docker ps -a

############### native steps  #####################

#--------- docker build
  - name: docker_native
    steps:
      - name: build
        type: DockerBuild
        configuration:
          affinityGroup: buildAndPush
          integrations:
            - name: johns_art
          inputResources:
            - name: myRepo
          dockerFileLocation: ./base
          dockerFileName: Dockerfile
          dockerImageName: 35.238.69.200:8082/buildimages/w19base
          dockerImageTag: ${run_number}
        execution:
          onStart:
            - ls "$env:TEMP"
          onComplete:
            - ls "$env:TEMP"
            - ls "$env:TEMP\jfrog"

      - name: push
        type: DockerPush
        configuration:
          affinityGroup: buildAndPush
          inputSteps:
            - name: build
          integrations:
            - name: johns_art
          outputResources:
            - name: myBuildInfo
          targetRepository: buildimages
          autoPublishBuildInfo: true
        execution:
          onStart:
            - choco install -y jfrog-cli --version=1.34.0
          onComplete:
            # - write-output "try the push manually using just "try the push manually using just docker"
            # - docker login 35.238.69.200:8082 -u ${int_johns_art_user} -p ${int_johns_art_apikey}
            # - docker push "${build_dockerImageName}:${build_dockerImageTag}"
            - ls "$env:TEMP"
            - ls "$env:TEMP\jfrog"
